# primitive data type == primitive data type 는 값을 비교
# reference data type == reference data type 는 주소값을 비교

int a=3, b=3;
System.out.println(a==b);
String s1 = new String("java"); //heap 메모리 생성
String s2 = new String("java"); //heap 메모리 생성
String s3 =  "java"; //string pool 메모리 영역 생성
String s4 =  "java"; //string pool 메모리 영역 생성
System.out.println(s1==s2); //heap 메모리에 각각의 객체가 생성
System.out.println(s1==s3); //heap 메모리와 string pool 메모리 영역의 주소를 비교
System.out.println(s3==s4);//String Pool 메모리 영역에서 동일한 객체가 존재하면 참조변수는 해당 객체의 주소를 저장하고 참조하게 됨

String클래스는 불변 문자열을 위해 설계된 클래스
StringBuffer 클래스는 가변 문자열을 위해 설계된 클래스
#문자열 내용 비교는 String객체.equals("문자열") 또는  String객체.equals(String객체)


public static void main(String[] args) {
	String s=null;  //참조변수는 생성전에 null을 할당해서 참조변수를 초기화함
	int num=0;   //로컬변수는 사용전에 반드시 초기해야 함
	System.out.println(num);
	System.out.println(s);
	System.out.println(s.length());//Runtime Exception 발생
	//NullPointerException은 객체를 생성하지 않은채 메서드를 호출했을때 발생		
}


public class Test2 {
    boolean b;   //멤버변수, 인스턴스 변수
    int num;
    char ch;
    double d;
    String s;
    
    public void method() { //멤버메서드
    	System.out.println(num);
		System.out.println(s);
    }
    
    //main메서드는 멤버변수와 멤버메서드들과 다른 메서드입니다.(소유자 클래스가 다름)
	public static void main(String[] args) {
		//멤버가 아닌 경우, 반드시 객체 생성해서 사용해야 합니다.
		Test2 t2 = new Test2();//객체 생성
		System.out.println(t2.num);
		System.out.println(t2.b);
		System.out.println(t2.ch);
		System.out.println(t2.d);
		System.out.println(t2.s);
	}
}


배열#########################################################################
reference type
하나의 변수로 동일한 타입의 여러 값을 참조할 수 있습니다.
생성시에 size를 선언해야 하며, 정적인 size설정이므로 , 동적으로 size는 변경 불가 (배열 객체를 다시 생성해야 함)
배열은 멤버객체, 로컬객체로 size만 선언해서  생성되더라도 default 초기값으로 초기화가 됨
배열은 생성되면 자동으로 length멤버필드가 함께 생성되고, 배열의 크기값이 저장됩니다.
배열의 요소를 접근, 사용할때는 index를 사용합니다. (index는 0부터 시작)
선언, 생성, 초기화 과정
int[] nums;
int  []nums;
int  nums[];

String[] strings;
String []strings;
String strings[];

nums = new int[5];  //생성, default 초기값으로 초기화됨, 1차원 배열
nums = new int[]{100, 200, 300}; // 생성, 명시적 초기화, 1차원 배열


public class ArrayTest1 {

	public static void main(String[] args) {
		int[] nums; //선언
		int[] nums2;
		nums = new int[5];  //생성, default 초기값으로 초기화됨, 1차원 배열
		nums2 = new int[]{100, 200, 300}; // 생성, 명시적 초기화, 1차원 배열
		System.out.println(nums.length);
		System.out.println(nums2.length); 
		for(int idx=0;idx<nums.length;idx++) {
			System.out.print(nums[idx]+" ");
		}
		System.out.println();
		for(int n : nums2) {//순차적 접근만 가능, advanced for문(foreach문)
			System.out.print(n+" ");
		}
	}
}



public class ArrayTest2 {
	public static void main(String[] args) {
		String[] strings;
		String[] strings2; //선언	
		String[] strings3; //선언
		strings = new String[5];  //생성, default 초기값으로 초기화됨, 1차원 배열
		strings2 = new String[]{new String("java"), 
				                new String("python"),
				                new String("db, sql") }; // 생성, 명시적 초기화 
		strings3 = new String[]{"Django", "jsp/servlet", "spring framework"};
		
		for(int idx=0;idx<strings.length;idx++) {
			System.out.print(strings[idx]+" ");
		}
		System.out.println();
		for(String n : strings2) {//순차적 접근만 가능, advanced for문(foreach문)
			System.out.print(n+" ");
		}
	}
}




#2차원배열 - 1차원 배열을 1개 이상 구성한 배열
int[][] nums;
int[] nums[];


nums = new int[5][5];
nums = new int[5][ ];//행 길이 고정, 1차원 배열의 size는 동일하지 않아도 됨
nums = new int[ ][5 ]; //컴파일 오류
nums = new int[ ][ ] {  {1},
                                {1, 2},
                                {1, 2, 3 },
                                {1, 2, 3, 4}
                              };


public class ArrayTest3 {
	public static void main(String[] args) {
		int[][] nums;
//		nums = new int[5][5];
//		nums = new int[5][ ];//행 길이 고정, 1차원 배열의 size는 동일하지 않아도 됨
//		nums = new int[ ][5]; //컴파일 오류
		nums = new int[ ][ ] {  {1},
		                        {1, 2},
		                        {1, 2, 3 },
		                        {1, 2, 3, 4}
		                         };
		System.out.println(nums.length);//2차원배열의 행size
		System.out.println(nums[0].length);//2차원배열의 첫번째 1차원배열의 size
		System.out.println(nums[1].length);//2차원배열의 두번째 1차원배열의 size	
		
		for(int idx=0;idx<nums.length;idx++) {
			for(int j=0;j<nums[idx].length;j++) {
			    System.out.print(nums[idx][j]+" ");
		      }
			System.out.println();
		}
	}
}

##############################################



public static void main(String[] args) {
	public class ArrayTest4 {
	public static void main(String[] args) {
		int[] src = new int[10];  
		int[] target = new int[10];
			 
		for(int idx=0;idx<src.length;idx++) {
		    src[idx] = idx+1;
	        target[idx] = 100;
		}
		for(int n : src) {
		     System.out.print(n+" ");
		}
		System.out.println();
		for(int n : target) {
		     System.out.print(n+" ");
		}
		System.out.println();
		System.arraycopy(src, 4, target, 2, 4);	
		for(int n : target) {
		     System.out.print(n+" ");
		}
	}//main end
}

#######클래스와 객체#############################################################
클래스 :  메모리에 객체를 생성하기 위한 설계도
객체 : 현실세계의 유형, 무형의 존재하는 어떤 것 => 소프트웨어적으로 관리대상 
         속성(상태를 저장)과 동작(기능, 속성을 사용하여 동작)으로 구성
         software building block
객체지향 언어 :  객체들로 조립 (객체들을 연결할 때 영향을 최소화하기 위해 느슨한 결합 형태로 구현 권장)

#자바는 객체지향언어이기 때문에 class단위로 구현
※객체지향언어 특징 : 상속, 캡슐화, 다형성

클래스(설계도) 구성 요소 :
클래스선언, 멤버변수(속성), 멤버메서드(기능), 생성자메서드

※자바는 클래스 상속은 단일 상속만 지원

클래스 선언 문법 :
접근제어자  [변경자]  class  클래스이름 {...} //자동으로 java.lang.Object를 상속받습니다.
접근제어자  [변경자]  class  클래스이름 extends 부모클래스명   {...}
접근제어자  [변경자]  class  클래스이름 [extends 부모클래스명]  implements 인터페이스명, 인터페이스명, ... {...}

#클래스 선언 가능한 접근제어자(Access Modifier) : public, (default)
#클래스 선언 가능한 변경자(Modifier) : class의 종류(타입)을 의미합니다. abstract, final


클래스의 멤버필드 선언 문법 : 
접근제어자 [변경자]  타입  field명 ;
접근제어자 [변경자]  타입  field명 = 초기값;
#클래스의 멤버필드 선언 가능한 접근제어자(Access Modifier) : public, protected , (default) , private 
#클래스의 멤버필드 선언 가능한 변경자(Modifier) : final,  static  , transient, volatile
#클래스의 멤버필드 선언 가능한 타입은 primitive data type, reference data type 모두 가능


public class Student {
    public String sno ;   //학번
    public String name;
    public int kor;
    public int math;
    public int eng;
   
    //과목 총점을 리턴하는 메서드
    public int  getTotal() {
          return  kor+math+eng;
    }

    //과목 평균을 출력하는 메서드
    public void printAverage(){
         System.out.println(getTotal()/3);
     }
} 


클래스의 기능 메서드 선언 문법 :
접근제어자  [변경자]  리턴타입 메서드이름([타입 변수, 타입 변수,...]) {....}
#멤버 메서드에 선언 가능한 접근제어자(Access Modifier) : public, protected , (default) , private 
#멤버 메서드에 선언 가능한 변경자(Modifier) : final,  static  , abstract, synchronized, native 
#멤버 메서드에 선언 가능한 리턴타입 :  primitive data type, reference data type, void


#클래스이름 : Calc
#멤버 메서드 : 
1.  정수2개와 문자열타입의 연산자 1개를 인수로 받아서 연산 결과(정수)를 리턴하는 메서드
2.  정수2개를 인수로 받아서 첫번째 인수에 대해 두번째 인수의 거듭 제곱을 수행, 출력하는 메서드



public class Calc {  
   public int  calculate(int n1, int n2, String op){   
	   int result =0;
	      switch(op) {
		   case "+" : result = (n1+n2) ; break;
		   case "-" : result =(n1-n2); break;
		   case "*" : result =(n1*n2); break;
		   case "/" : result =(n1/n2); break;
		   case "%" : result =(n1%n2); break;
		   default : 
			   result = -1;
		   }
	      return result;
    }
   
   public void squarePower(int n1, int n2 ) {
	   System.out.println(Math.pow(n1, n2));
   }
   }



public class CalcTest {
	public static void main(String[] args) {
		Calc  c1 = new Calc(); //Calc클래스의 객체를 생성		    
		   int r = c1.calculate(3, 5, "*");
		   System.out.println(r);
		   c1.squarePower(3, 5);

	}

}

################################################################################


public class Array {
	private String title;
	private int row;
	private int col;
	private int[][] array;

	public Array(String title, int row, int col) {
		 //생성자 메서드 : 객체 생성할때 호출되며, 객체의 멤버변수값 초기화
	} 
	public int getRow() {
		return 0;
	}

	public int getCol() {
		return 0;
	}

	public int[][] getArray() {
		return null;
	}
	
	public void setRow(int row) {
		 
	}

	public void setCol(int col) {
		 
	}

	public void setArray(int[][] array) {
		 
	}
	
	public void makeArrayData() {		
	}
	
	private int getRandomNumber() {
		return 0;
	}
	
	public void printArray() {
		
	}
	
	public void findMatchNumber(Array src, Array desc) {
		
	}

}



public class Account {
	private int balance;

	public Account(int balance) {

	}

	public int getBalance() {
		return 0;
	}

	public void setBalance(int balance) {
		 
	}
	public boolean deposit(int amount) {
		return true;
	}
	public boolean withdraw(int amount) {
		return false;
	}
}





public class Customer {
	private String ssn;
	private String name;
	private Account account;

	public Customer(String ssn, String name) {

	}

	public String getSsn() {
		return null;
	}

	public void setSsn(String ssn) {

	}

	public String getName() {
		return null;
	}

	public void setName(String name) {

	}

	public Account getAccount() {
		return null;
	}

	public void setAccount(Account account) {

	}

	public String toString() {
		return " ";
	}

}


#########################################################################
클래스에 선언가능한 멤버변수 종류 :
1. 인스턴스변수 : 객체마다 서로 다른 고유한 상태값을 가져야 할때
2. 상수 : 반드시 초기화가 필요하며, 변경 불가능한 상태값을 가져야 할때
3. 클래스변수 : 동일한 클래스로부터 생성된 객체들이 공유해야 하는 공유변수(전역변수)
                     클래스변수는 객체 생성없이 클래스이름으로 사용 가능
                      멤버가 아니더라도 static메서드에서 사용 가능
                      Constant Pool 메모리 영역에 단 하나의 변수가 생성됨 
                      예) 티켓예매 클래스의 티켓수를 저장하는 변수


멤버 메서드는 기능을 정의

############################################################################
※ this는 클래스의 멤버 메서드 또는 생성자 메서드에서 사용하는 클래스자신을 의미하는 참조변수

public class MethodEx {
	private int num;  //멤버변수
    public void setNum(int num) { //매개변수 num은 로컬변수
    	//값의 유효성 검사 코드
    	//로컬변수와 멤버변수간에 이름 충돌이 발생하면 멤버변수 앞에 클래스로부터 생성되는
    	//객체 자신을 의미하는 특별한 참조변수를 사용합니다.
    	this.num = num;
    }
    
    public int getNum() {
    	return num;
    }	
}

public class Test3 {

	public static void main(String[] args) {
		MethodEx ex = new MethodEx();
		System.out.println(ex.getNum());
        ex.setNum(100);
        System.out.println(ex.getNum());
	}

}

########################################################################
메소드 호출시에 매개변수 전달방식  :
1. CallByValue : 값을 복사해서 전달, 파라미터가 primitive data type일때
2. CallByReference :  주소를 전달하는 방식, 파라미터가 reference data type일때 


public class CallByValueEx {
    public void change(int a, int b) {
    	int temp = a;
    	a = b;
    	b = temp;
    }
	public static void main(String[] args) {
		 int x=3, y=7;
		 CallByValueEx  ex = new CallByValueEx();
		 System.out.println("x="+x+", y="+y);
		 ex.change(x, y);
		 System.out.println("x="+x+", y="+y);
	}
}




public class CallByReferenceEx {
    public void change(int[] a, int[] b) {
    	int temp = a[0];
    	a[0] = b[0];
    	b[0] = temp;
    }
	public static void main(String[] args) {
		 int[] x= {3}, y= {7};
		 CallByReferenceEx  ex = new CallByReferenceEx();
		 System.out.println("x[0]="+x[0]+", y[0]="+y[0]);
		 ex.change(x, y);
		 System.out.println("x[0]="+x[0]+", y[0]="+y[0]);
	}
}

###############################################################
계산기 프로그램 구현시..
하나의 클래스내에서 동일한 기능을 수행하는 메서드의 이름을 재사용하도록 메서드 overload(중복정의)할 수 있습니다.
메서드 overload는 다형성을 구현한 특성

#메서드 overload 규칙:
access modifier는 동일하지 않아도 됨
return type 동일하지 않아도 됨
메서드 이름은 반드시 동일해야 함
메서드의 파라미터는 순서, 개수, 타입 중 최소한 1개는 다르게 정의해야 함


#생성자메서드 선언 문법 :
접근제어자   클래스이름([타입 변수, 타입 변수,...]) {....}
생성자메서드에서 선언 가능한 접근제어자 : public, protected , (default), private
변경자(Modifier)선언 X
리턴타입 선언 X
메서드이름은 클래스 이름과 대소문자 정확하게 일치해야 함
생성자 메서드는 생성되는 객체의 멤버필드들을 초기화하기 위해 .. new 생성자메서드()
객체를 생성할때는 제공되는 생성자메서드로만 가능합니다.
생성자를 하나도 명시적으로 정의하지 않으면 컴파일시에 자동으로 jdk가 default 생성자를 만들어 줌
생성자를 명시적으로 정의하면 컴파일시에 jdk가 default 생성자를 만들어 주지 않습니다.
※ 생성자메서드는 overload가능합니다.
생성자메서드내에서 overload된 다른 생성자 호출 가능합니다.


public class Student {
    public String sno ;   //학번
    public String name;
    public int kor;
    public int math;
    public int eng;
    public Student(String sno, String name, int kor, int math,int eng ) {
    	this.sno = sno;
    	this.name = name;
    	this.kor = kor;
    	this.math = math;
    	this.eng = eng;
    }
   
    //과목 총점을 리턴하는 메서드
    public int  getTotal() {
          return  kor+math+eng;
    }

    //과목 평균을 출력하는 메서드
    public void printAverage(){
         System.out.println(getTotal()/3);
     }
} 