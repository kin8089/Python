====================================================================
Day 5

	[추상 클래스]

추상화 : 구체적인 개념으로부터 공통된  부분을 추려내어 일반화할 수 있도록 하는 것을 일반적으로
           사용할 수 있는 단계가 아닌 미완성적 개념

부모클래스는 자식클래스들의 공통적인 속성과 기능을 상속해줄 수 있도록 설계를 한다.
상족해줄 메서드중에서는 자식클래스를 반드시 구현하도록 강제하고, 부모클래스에서는 spec만 제공을 할 경우,
abstract 메서드로 정의한다.

	[추상 메서드 선언 문법]

접근제어자 abstract 리턴타입 메서드이름(파라미터 .....)    : 구현 body가 없음

추상 메서드가 정의된 클래스는 구현 body가 없어서 메모리에 객체 생성을 못함.
Animal ani = new Animal();    :  불가

때문에 클래스에 객체를 생성 못하는 클래스로 선언해야 합니다.

추상클래스를 상속받는 자식클래스는 부모클래스의 추상 메서드를 override해야 객체가 생성됨.
자식클래스에서  부모클래스의 추상 메서드를 override할때 abstract를 선언하지 않습니다.

추상클래스에는 추상 메서드를 0개 이상 선언할 수 있습니다.
추상클래스에는 구현 body가 있는 메서드를 정의할 수 있습니다
추상클래스간에 상속도 가능


	[인터페이스]

OS는 hardware와 software사이에서 인터페이스 역할을 함
인터페이스는 서비스 목록이다

접근제한자 interface 인터페이스이름 [extends 부모인터페이스 , .... : 상속받을 경우]{
	상수;  //멤버필드는 상수만 가능
	추상메서드;
            //jdk 1.8부터인가 함수적 프로그래밍 지원을 위해...default 메서드
            //jdk 1.8부터인가 함수적 프로그래밍 지원을 위해...static 메서드
}


	[예외처리]

오류(error) :
1. 문법 오류(syntax error) - 컴파일 시
2. 실행 오류(runtime error) - 실행 시

예외(exeption) : 논리적에러, 가벼운 오류 - 프로그램 보완 - 정상실행

Exception 분류 : 
unchecked exception : runtime exception종류
checked exception : 컴파일시에 예외 처리가 필요하다고 체크해줌 (io, db연동, network통신...)

예외처리 : 
1. declare - throws
2. handle - try, catch, finally

....
try {
     예외 발생 가능성이 있는 코드;
     }catch(예외타입 e){
      예외 처리;
     }
...

try {
     예외 발생 가능성이 있는 코드;
     }catch(예외타입 e){
      예외 처리;
     }finally {
      예외 발생 상관없이 무조건 수행;
      사용 자원 정리;
     }

try {
     예외 발생 가능성이 있는 코드;     
     }finally {
      예외 발생 상관없이 무조건 수행;
      사용 자원 정리;
     }


try {
     예외 발생 가능성이 있는 코드;
     }catch(예외타입1 e){
      예외 처리;
      }catch(예외타입2 e){
      예외 처리;
     }finally {
      예외 발생 상관없이 무조건 수행;
      사용 자원 정리;
     }
