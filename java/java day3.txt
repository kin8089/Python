==================================================================================
Day 3

기본 데이터 타입 == 기본 데이터 타입  / 값을 비교

참조 데이터 타입 == 참조 데이터 타입 / 주소값을 비교               


String 클래스는 불변 문자열을 위해 설계된 클래스
StringBuffer 클래스는 가변 문자열을 위해 설계된 클래스
문자열 내용 비교는 String객체.equals("문자열") or String객체.equals(String객체)  


	[배열]
참조 데이터 타입(reference)
하나의 변수로 동일한 타입의 여러 값을 참조 가능. 생성시 size를 선언해야함(size는 정적으로 변경 불가)
배열은 멤버객체, 로컬객체로 size만 선언해서 생성하더라도 default 초기값으로 초기화.
배열은 생성시 자동으로 length멤버필드가 함께 생성. 배열의 크기값이 저장된다.
배열의 요소를 접근, 사용할때는 index를 사용.(0부터 시작)

선언 - 생성 - 초기화 과정이 필요         (생성시 new 필수)
ex) int[] nums; (보편적) /  int nums[] ;  / int []nums;   : 선언

    nums = new int[5]                     / 생성. default 초기값으로 초기화. 1차원 배열
    nums = new int[](100,200,300);     / 생성. 명시적 초기화. 1차원 배열

	[2차원배열]
1차원 배열을 1개 이상 구성한 배열

int[][] nums; (보편적)
int[] nums[];

ex) nums = new int[행 row][열 col];
     nums = new int[5][];   // 행 길이 고정. 1차원 배열 5개 가짐. 1차원 배열의 size는 달라도 괜찮다.
     nums = new int[][5];   // 컴파일 오류.
     nums = new int[][]{   {1} , {1 , 2} , {1 , 2 , 3} , {1 , 2 , 3 , 4}  };
                                                              



	[클래스와 객체]

자바는 객체지향 언어로 class단위로 구현

객체지향언어의 특징 : 상속, 캡슐화, 다형성

객체지향 : 객체들로 조립(객체들을 연결할 때 서로간의 영향을 최소화 해야하기 위한 느슨한 형태로 구현을 하는게 좋음) (레고)

클래스 : 메모리에 객체를 생성하기 위한 설계도 (붕어빵 틀)

객체 : 현실세계에 있는 유,무형으로 존재하는 것 (소프트웨어적으로 관리대상)
        속성(상태를 저장) 과 동작(기능. 속성을 사용하여 동작함) 으로 구성 (붕어빵)
        software building block

	[클래스 구성요소]
1. 클래스 선언 

2. 멤버변수(속성) 

3. 멤버메서드(기능)

4. 생성자메서드(파이썬 init과 동일)


	[클래스 선언 문법]
접근제어자 [변경자 : 생략가능] class 클래스이름 {...}
접근제어자 [변경자 : 생략가능] class 클래스이름 [extends 부모클래스명] {...}    //자바는 클래스 상속에서 단일 상속만 지원
접근제어자 [변경자 : 생략가능] class 클래스이름 [extends 부모클래스명] implements 인터페이스명, 인터페이스명... {...}


클래스 선언 가능한 접근제어자(Access Modifier) : public, protected , (default) , private
클래스 선언 가능한 변경자(Modifier) : class의 종류(타입)을 의미함. abstract, final , static , transcient , voltile

	[클래스의 멤버필드 선언 문법]
접근제어자 [변경자] 타입 field명;
접근제어자 [변경자] 타입 field명 = 초기값 ;

클래스 멤버필드 선언 가능한 접근제어자(Access Modifier) : public, protected , (default) , private
클래스 멤버필드 선언 가능한 변경자(Modifier) : final , static , transcient , voltile
클래스 멤버필드 선언 가능한 타입은 기본데이터 + 참조데이터 모두 가능


public class Student {
 public String sno ; //학번
 public String name;
 public int kor;
 public int math;
 public int eng;

//과목 총점을 리턴하는 메서드
 public int getTotal(){
	return kor+math+eng;
}

//과목 평균을 출력하는 메서드
 public void printAverage(){
	System.out.println(getTotal()/3);
}

}

	
	[클래스의 기능 메서드 선언 문법 ]
접근제어자 [변경자] 리턴타입 메서드이름([타입 변수, 타입 변수 ...]) {....}

멤버 메서드 선언 가능한 접근제어자(Access Modifier) : public, protected , (default) , private
멤버 메서드 선언 가능한 변경자(Modifier) :  final , static , abstract, native
멤버 메서드 선언 가능한 타입은 기본데이터 + 참조데이터 모두 가능 , void


	[클래스 선언가능한 멤버변수 종류]
1. 인스턴스변수 : 객체마다 서로 다른 고유한 상태값을 가져야 할때

2. 상수 : 반드시 초기화가 필요하며, 변경 불가능한 상태값을 가져야 할때

3. 클래스변수 : 동일한 클래스로부터 생성된 객체들이 공유해야 하는 공유변수(전역변수)
	       객체생성 없이 클래스 이름으로 사용가능, 멤버가 아니여도 static메서드에서 사용가능
	       Constant Pool 메모리에 단 하나의 변수가 생성
	       ex) 티켓예매 클래스의 티켓수를 저장하는 변수


	[멤버 메서드]

멤버 메서드는 기능을 정의

this는 클래스의 멤버 메서드 또는 생성자 메서드에서 사용하는 클래스 자신을 의미하는 참조변수

	[메서드 호출시에 매개변수 전달방식]

1. CallByValue : 값을 복사해서 전달 / 파라미터가 primitive data type일때 

2. CallByReference :  주소를 전달하는 방식 /  파라미터가 reference data type일때


	[계산기 프로그램 구현]

계산기 프로그램 구현시..
하나의 클래스내에서 동일한 기능을 수행하는 메서드의 이름을 재사용하도록 메서드 overload(중복정의)할 수 있습니다.
메서드 overload는 다형성을 구현한 특성

#메서드 overload 규칙:
access modifier는 동일하지 않아도 됨
return type 동일하지 않아도 됨
메서드 이름은 반드시 동일해야 함
메서드의 파라미터는 순서, 개수, 타입 중 최소한 1개는 다르게 정의해야 함


	[생성자메서드 선언 문법]

접근제어자 클래스이름([타입 변수, 타입 변수 ...]) {....}
변경자 선언 , 리턴타입 선언 x
메서드이름은 클래스 이름과 대소문자 정확하게 일치해야함
생성자 메서드는 생성되는 객체의 멤버필드들을 초기화 하기 위해 사용
객체를 생성할때는 제공되는 생성자메서드로만 가능

생성자메서드에서 선언 가능한 접근제어자 : public , protected , default, private

.. new 생성자메서드()

생성자를 하나도 명시적으로 정의하지 않으면 컴파일 시 자동으로 jdk가 default 생성자를 만들어 줌
생성자를 하나도 명시적으로 정의하면 컴파일시 jdk가 default 생성자를 만들지 않음
생성자메서드는 overload가능
생성자메서드내에서 overload된 다른 생성자 호출 가능.
