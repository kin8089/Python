reference type은 상속관계가 존재할때만 Up Casting, Down Casting 가능
Up Casting된 객체만  Down Casting 가능

#############################################################
package workshop.entity;

public class Travel {
  private String travelCode;
  private String cityName;
  private String flight;
  private int travelType;
  private int maxPeople;
  private int reserved;
  public static final int INDIVIDUAL =0;
  public static final int PACKAGE = 1;
public Travel(String travelCode, String cityName, String flight, int travelType, int maxPeople) {
	this.travelCode = travelCode;
	this.cityName = cityName;
	this.flight = flight;
	this.travelType = travelType;
	this.maxPeople = maxPeople;
}
public String getTravelCode() {
	return travelCode;
}
public String getCityName() {
	return cityName;
}
public String getFlight() {
	return flight;
}
public String getTravelType() {
	String type = null;
	if (travelType == INDIVIDUAL) {
		type="개별자유여행";
	}else if (travelType == PACKAGE) {
		type="패키지여행";
	}
	return type;
}
public int getMaxPeople() {
	return maxPeople;
}
public int getReserved() {
	return reserved;
}
public void setReserved(int reserved) {
	this.reserved = reserved;
}
public void printTravelInfo() {
	System.out.printf("%1$6s  %2$4s  %3$5s  %3$6s    %5$2d명     %5$2d명\n", travelCode, cityName, flight, getTravelType(), maxPeople, reserved);
	}
  
}





package workshop.biz;

import workshop.entity.Travel;

public class TravelBiz {
	private Travel[] travels;

	public TravelBiz() {
		travels = new Travel[] {
			new Travel("TRV001", "뭔헨", "독일항공",   Travel.INDIVIDUAL, 10),
			
			new Travel("TRV002", "프라하", "에어프랑스", Travel.INDIVIDUAL,7),
			new Travel("TRV003", "LA", "델타항공", Travel.PACKAGE,12),
			new Travel("TRV004", "후쿠오카", "대한한공",Travel.INDIVIDUAL,15),
			new Travel("TRV005","상해", "남방항공", Travel.PACKAGE,10)
		};
		//travels[0] = new Travel();
	}

	public void printAllTravels() {
        for (Travel t : travels) {
        	t.printTravelInfo();
        }
	}

	public void printIndividualTravels() {
		for (Travel t : travels) {
			if (t.getTravelType().equals("개별자유여행")) {
				t.printTravelInfo();
			}
        }
	}

	public void printPackageTravels() {
		for (Travel t : travels) {
			if (t.getTravelType().equals("패키지여행")) {
				t.printTravelInfo();
			}
        }
	}

	public Travel reserveTravel(String travelCode, int reserveCount) {
		Travel t = null;
		for (Travel travel : travels) {
			if (travel.getTravelCode().equals(travelCode) ) {
				 int people = travel.getMaxPeople()-travel.getReserved();
				if (people> reserveCount){
					travel.setReserved(travel.getReserved()+reserveCount);
					System.out.println("예약이 완료되었습니다.");
					t = travel;
				}else {
					System.out.println("예약 가능 인원이 초과되었습니다.(예약 가능 인원: "+people+"명)");
				}				
			} //outer if end
		}//for end
		return t;
	}

	public void printTravelListTitle() {
		System.out.println();
	}

}





package workshop.test;

import workshop.biz.TravelBiz;
import workshop.util.TravelUtil;

public class TravelTest {

	public static void main(String[] args) {
		TravelBiz biz = new TravelBiz();
		int menu = 0;
		do {
		 printMenu();
		 System.out.print("## 메뉴 입력 :");
		 menu = Integer.parseInt(TravelUtil.getUserInput());
		 switch(menu) {
		 case 1 :  
			 biz.printTravelListTitle();
			 biz.printAllTravels();
			 System.out.println("-----------------------------------------------------");
			 break;
		 case 2 :  
			 biz.printTravelListTitle();
			 biz.printIndividualTravels();
			 System.out.println("-----------------------------------------------------");
			 break;			 
		 case 3 :  
			 biz.printTravelListTitle();
			 biz.printPackageTravels();
			 System.out.println("-----------------------------------------------------");
			 break;
		 case 4 :  
			 System.out.println("여행 상품을 예약합니다.");
			 System.out.print("여행 코드 입력 :");
			 String travelCode = TravelUtil.getUserInput();
			 System.out.print("예약 인원 입력 :");
			 int reserveCount  = Integer.parseInt(TravelUtil.getUserInput());
			 biz.reserveTravel(travelCode, reserveCount);
			 System.out.println("-----------------------------------------------------");
			 break;
		  
		 case 9 :
			 System.out.println("------------------------");
			 System.out.println("프로그램을 종료합니다. Bye~");
			 System.out.println("------------------------");
			 System.exit(0);
		default :
			System.out.println("메뉴를 잘못 입력하였습니다.");
		 }
		}while(menu!=9);

	}
	
	public static void printMenu() {
		System.out.println("====== < 메뉴 > ======");
		System.out.println("1.전체 여행 상품 조회");
		System.out.println("2.개발 자유여행 상품 조회");
		System.out.println("3.패키지여행 상품 조회");
		System.out.println("4.여행 상품 예약");
		System.out.println("9.종료");
		System.out.println("======================");
	}
}






package workshop.util;

import java.util.Scanner;

public class TravelUtil {
   public static String getUserInput() {
	   Scanner input = new Scanner(System.in);
	   return input.nextLine();
   }
}

추상 클래스 #################################################################
추상화 - 구체적인 개념으로부터 공통된 부분들만 추려내어 일반화 할 수 있도록 하는 것을
            일반적으로 사용할 수 있는 단계가 아닌 아직 미완성(未完成)적 개념

부모클래스는 자식클래스들의 공통적인 속성과 기능을 상속해줄 수 있도록 설계를 합니다.
상속해줄 메서드중에서는 자식클래스 반드시 구현하도록 강제하고, 부모 클래스에서는 spec만 제공해야 할 경우, abstract 메서드로 정의합니다

추상 메서드 선언 문법:  구현 body가 없음
접근제어자 abstract 리턴타입 메서드이름(파라미터, ...); 

추상 메서드가 정의된 클래스는  구현 body가 없는 메서드 때문에 메모리에 객체(instance) 생성 못함
Animal  ani = new Animal(); X
때문에 클래스에 객체를 생성 못하는 클래스로 선언해야 합니다. (public abstract class ~ 선언)

추상클래스를 상속받는 자식클래스는 부모클래스의 추상 메서드를 override해야만 객체 생성이 가능합니다.
자식클래스에서  부모클래스의 추상 메서드를 override할때 abstract를 선언하지 않습니다.

# 추상클래스에는 추상 메서드를 0개 이상 선언할 수 있습니다.
# 추상클래스에는 구현 body가 있는 메서드를 정의할 수 있습니다
# 추상클래스간에 상속도 가능


인터페이스##################################################################
OS는 hardware와 software사이에서 인터페이스 역할을 함
인터페이스는 서비스 목록이다
인터페이스는 객체 생성은 불가하면 선언자로는 가능

인터페이스 문법 :
접근제한자  interface 인터페이스이름 [extends 부모인터페이스, ....] {
    상수 ; // 멤버필드
     추상메서드 ;  
    //jdk 1.8부터인가 함수적 프로그래밍 지원을 위해...default 메서드
    //jdk 1.8부터인가 함수적 프로그래밍 지원을 위해...static 메서드
}

#########예외처리######################################################
Error와 Exception 개념 차이

Exception 분류 : 
unchecked exception : runtime exception종류
checked exception : 컴파일시에 예외 처리가 필요하다고 체크해줌 (io, db연동, network통신...)

예외처리 : 
1. declare - throws
2. handle - try, catch, finally

#throw 


import java.io.FileInputStream;
import java.io.IOException;

public class ExceptionTest3 {
	public void method1() throws IOException{
       System.out.println("method1() called");
       method2();
	}

	public void method2() throws IOException{
		System.out.println("method2() called");
		method3();
	}

	public void method3() throws IOException{
		System.out.println("method3() called");
		//메서드 처리중 예외가 발생됨을 모의
		if(true) throw new IOException("예외 발생");
	}

	public static void main(String[] args) throws IOException{
		 ExceptionTest3 test = new ExceptionTest3();
		 test.method1();
	}

}



....
try {
     예외 발생 가능성이 있는 코드;
     }catch(예외타입 e){
      예외 처리;
     }
...

try {
     예외 발생 가능성이 있는 코드;
     }catch(예외타입 e){
      예외 처리;
     }finally {
      예외 발생 상관없이 무조건 수행;
      사용 자원 정리;
     }

try {
     예외 발생 가능성이 있는 코드;     
     }finally {
      예외 발생 상관없이 무조건 수행;
      사용 자원 정리;
     }


try {
     예외 발생 가능성이 있는 코드;
     }catch(예외타입1 e){
      예외 처리;
      }catch(예외타입2 e){
      예외 처리;
     }finally {
      예외 발생 상관없이 무조건 수행;
      사용 자원 정리;
     }


########################################################

package lab.workshop.entity;

public class Book {
	private String title;
	private int price;

	public Book() {
		super();
	}
	public Book(String title, int price) {
		super();
		this.title = title;
		this.price = price;
	}
	public String getTitle() {
		return title;
	}
	public int getPrice() {
		return price;
	}
	@Override
	public String toString() {		 
		return "[제목]"+getTitle()+"\t"+"[가격]"+getPrice();
	}
}


