====================================================================
Day 1

	[Java 기본 절차]
1. 소스코드작성 (class 정의, class이름과 동일하게 파일저장.java)

2. javac로 컴파일 (클래스이름.class , 바이트코드 생성)

3. java로 생성된 클래스이름.class 실행


	[어플리케이션 종류]
1. standalone 어플리케이션 (서버없이 홀로 실행 가능)
-JRE - JVM, JVM이 main메서드를 실행(main에 실행코드를 넣어줘야함)

강의에서는 1번만 다룸

2. 클라이언트 / 서버가 있는 어플리케이션  (ex. 카카오톡)


	[명령어]

print  : 실행하고 대기 

println : 실행하고 다음줄에서 대기(줄 바꿈)

cd = cmd에서 폴더 이동

cd\ = cmd에서 폴더 뒤로가기

dir/w = cmd에서 폴더 내 파일보기




	[Java 주의사항]

1. 키워드 : 클래스명, 변수명, 메서드명으로 사용불가. 키워드는 전부 소문자.

2. 클래스, 메서드, if조건문 블럭, for반복문 블럭등에 종속적인 문장은 {} 사용

3. 문장 끝에는 항상 ; 사용

4. 문자열은 무조건 " " (큰따옴표)로 감싸줘야 한다

5. java는 대소문자를 구별함. 틀릴 시 오류 발생

<Naming 규칙 : 컴파일시 체크>
1. 영문자로 시작.
2. 숫자,특수문자, _ $ 허용
3. 길이 제한 x
4. 키워드 불가
5. java.lang 패키지의 클래스이름은 사용 불가




	[데이터 유형]

1. Primitive Data Type : 기본자료형. =(할당연산자), boolean , short, int, long, float, double , byte, char 등 주로 사용

2. Reference Data Type : 참조 자료형. .(소유연산자), 객체(class, 배열, interface)

컴파일 언어는 정적타입 언어로서 데이트를 메모리에 저장하고 참조하기 위한 변수 선언시
반드시 타입을 선언 해야 함.

타입선언 변수이름 ;
         or
타입선언 변수이름 = 초기값 ;

[타입]
boolean : 논리값 저장, 1byte할당, 정수와 호환되지 않기 때문에 true, false로만 값을 사용한다.

byte : 정수값 저장 타입. 1byte할당 , binary로 저장 , -128 ~ 127 유효범위만 저장. 

short : 정수값 저장 타입. 2byte할당 , binary로 저장 , -2^15 ~ 2^15 - 1 (2의 15승) / -327698 ~ 32767 유효범위값 저장

int : 정수값 저장 타입, 4byte할당 , -2^31 ~ 2^31 - 1 / -2147483648 ~ 2147483647 유효범위값 저장

long : 정수값 저장 타입, 8byte할당 , binary로 저장, -2^63 ~ 2^63 - 1 유효범위값 저장, 8byte binary로 만들도록 값L 같이 선언.

char : 하나의 문자를 저장하기 위한 타입, unicode 지원 , 2byte 할당 (0 ~ 2^16 - 1 / 0 ~ 65535 유효범위) 
        문자 '0' - ascii = 48 , 'a' - ascii = 97 'A' - ascii = 65  / ascii : 아스피코드

float : 실수값 저장 타입, 4byte 할당, 부동소수점 형식, 지수부 가수부 형식으로 저장, 실수값F , 실수값f 저장

double : 실수값 저장 타입, 8byte 할당, 부동소수점 형식, 지수부 가수부 형식으로 저장, 실수값D , 실수값d , 실수값 저장



정수표현방식 : 10진수 , 8진수 , 16진수 저장가능 , 출력은 10진수로 출력



Reference Type : 클래스 , 배열 , 인터페이스

String - 클래스 
String st = new.String("Hello"); // 객체생성, heap 메모리에 생성
String st = "Hello" ;  // 문자열 객체만 허용, String pool 메모리에 생성

st.             


	[형변환]

promotion : 작은타입이 큰 타입으로 자동 행변환

int a1 = 5
  float f1 = a1;

casting : 큰타입에서 작은타입으로 형변환은 자동x , 명시적으로 cast 연산자를 이용해야함

float f1 = 5.15f
 int a1 = f1;       // error

boolean 타입은 정수타입들과 형변환이 불가능함

byte와 char타입간에는 casting만 가능
short와 char타입간에는 casting만 가능

	[연산자]
단항연산자 - (), ++, --, !, ~, +(sign), -(sign) , not연산자 , (!) , ()


이항연산자 - 산술, 비교, 비트, 논리, shift

산술(+, -, *, %, /)의 정수의 연산의 결과는 정수로 나온다.

비교(<, >, <=, >=, !=) : 결과는 boolean

비트(&, ^, l) : binary 값으로 연산하며 결과는 정수

논리(&&,ll) 조건식&& 조건식, 조건식ll조건식, 결과는 boolean

비교(<<, >>, >>>) : left shift는 왼쪽으로 bit이동시키고 오른쪽 bit는 0으로 채움 (x<<y : x*2^y 와 동일)
		  right shift는 오른쪽으로 bit이동시키고 오른쪽 bit는 sign bit로 채움 (x>>y : x/2^y 와 동일)
		  unsigned right shift는 오른쪽으로 bit를 이동시키고 왼쪽 bit는 0으로 채움, 결과는 항상 양수

할당(+=, -=, /=, %=)

삼항연산자 : operand3, operator 1
조건표현식 항 ? true일 때항 : false일 때 항 (ex. x>=y ? 99.9 : 90)

#하나의 연산식내에서 가장 큰  타입으로 promotion 형변환이 일어남

	[조건문]

if (조건식1) {
   문장 ; //조건식1이 true일때
...
} else if (조건식2) {
  문장 ; // 조건식1이 false이고 조건식2가 true일때
...
}   else if (조건식3) {
  문장 ; // 조건식1,2가 false이고 조건식3이 true일때  
...
} else {
 문장 ; //위의 모든 조건식이 false일때
...
} 

중복 if문

if (조건식) {
   if (조건식) {
	문장 ; // true일떄
...
 }
}                    