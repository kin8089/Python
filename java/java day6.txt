java.lang.Trowable  <--- Error       	<--- 
		 <--- Exception	<--- 

예외 분류 :

1. unchecked exception

2. checked exception  - 컴파일 시 io, db연동, network

예외처리 : 
1. declare - throws
2. handle - try, catch, finally

의도적으로 예외 발생 : throw

ex)
메서드 선언() throws 예외클래스명 {}

throw new 예외클래스(메세지,속성값);


try {
  예외 발생 가능성이 존재하는 코드;
  코드;
}	catch(예외클래스명 객체){       //0 ~ 여러번 선언가능 , 여러 예외 클래스를 catch하는 경우 계층구조의 역순으로 catch블락 정의
	예외처리 코드;
	} finally{     // 0 ~ 1개 선언  , 예외발생과 무관하게 무조건 수행 , 수행했던 자원을 정리
        }
}


사용자 정의 예외 클래스는 예외 처리할 내용과 연관성이 높은 Exception종류 클래스를 상속

사용자 정의 예외 클래스는 멤버필드 , 생성자, 메서드 정의를 할 수 있다.

ex) 특정범위를 벗어나는 값에 대한 예외 발생 혹은 처리

class RangeBoundsException extends Exception {
	private double last_tall = 161;
	public RangeBoundsException(String message){
	super(message);
}
	public double get_ast_tall() {
	return last_tall;	
    }
}

double[] middle_talls = new double[] {152,155.5,148.5,160,162,192,168,159,157,170,125,171};

올해 중학생 키 입력값에서 유효범위를 체크해서 130~180을 벗어나면 예외 발생.
예외 발생 시킬 때 메시지는 "유효범위보다 낮습니다" or "유효범위보다 높습니다"
예외 발생 시 예외클래스에 저장된 작년도 키값으로 보정.
올해의 중학생 평균 키 출력.

class ExceptionTest{

public void checkTall(double all){
// 유효범위를 체크해서 130~180을 벗어나면 예외 발생.
예외 발생 시킬 때 메시지는 "유효범위보다 낮습니다" or "유효범위보다 높습니다" 설정
     } 

public double averageTall(double[] talls) {
// 올해의 중학생 평균 키 출력.

public static void main(String[] args){
double[]  middle_talls = new double[] { 152,155.5,148.5,192,160,162,165,168,115,159,157,170,171};

       }
   }
}



	[내부클래스]

클래스 내부에 클래스를 정의 할 수 있다.

Inner Member Class 

 Inner Static Class : Inner Member Class 가 static 멤버 또는 static 매서드를 가지는 경우

Inner Local Class

Annoymous Class : 익명 클래스, 선언과 동시에 생성되며 1회성 실행되는 클래스


ex)

class Outer {
 private int number;                          -----------
 
	class Inner{
 	private int member;                             outer 멤버필드
	pubilc void InnerMethod(){
}
	}                                      -----------
 public void OuterMethod(){                              outer 멤버메서드
}
}

컴파일하면 Outer.class와 Outer$Inner.class가 생성되며, 코드에서는 Outer.Inner로 선언합니다.
Inner Member Class는 Outerclass의 멤버이므로 private , protected 선언 가능